name: CI Windows - Build Raylib Project

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v3
      
      - name: Déterminer le nom du projet
        id: project
        shell: bash
        run: echo "name=$(basename "$GITHUB_WORKSPACE")" >> "$GITHUB_OUTPUT"

      - name: Installer Chocolatey + MinGW + CMake
        run: |
          choco install mingw -y
          choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
        shell: powershell

      - name: Ajouter MinGW au PATH
        run: |
          echo "C:\ProgramData\mingw64\mingw64\bin" >> $env:GITHUB_PATH
        shell: powershell

      - name: Cloner et construire Raylib
        run: |
          git clone https://github.com/raysan5/raylib.git
          cd raylib
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DBUILD_EXAMPLES=OFF ..
          mingw32-make
          cmake --install . --prefix "C:/raylib"
        shell: cmd

      - name: Créer le dossier build
        run: mkdir build

      - name: Configurer le projet avec CMake
        run: cmake -B build -G "MinGW Makefiles" -DCMAKE_PREFIX_PATH="C:/raylib"

      - name: Compiler le projet
        run: cmake --build build --config Release

      - name: Vérifier si l'exécutable a été généré
        shell: powershell
        run: |
          if (Test-Path "build/${{ steps.project.outputs.name }}.exe") {
            Write-Output "Exécutable généré."
          } else {
            Write-Error "Pas d'exécutable"
            exit 1
          }

      - name: Publier la release avec l'exécutable
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "Release ${{ github.ref_name }}"
          files: build/${{ steps.project.outputs.name }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
